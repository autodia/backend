#!/bin/bash

# create keytab
#/bin/bash ./scripts/generate-keytab.sh

VOLUME_DIR="/var/faktura"

[ ! -d "$VOLUME_DIR" ] && { echo "please mount a shared volume at /var/faktura, goodbye"; exit; }

## creates log and socket dir in docker volume
BACKEND_SHARED_DIR="$VOLUME_DIR/backend"
LOG_DIR="$BACKEND_SHARED_DIR/logs"
RUN_DIR="$BACKEND_SHARED_DIR/run"
STATIC_DIR="$BACKEND_SHARED_DIR/static"
MEDIA_DIR="$BACKEND_SHARED_DIR/media"
SECRETS="/docker/secrets"

mkdir -p "$LOG_DIR"
mkdir -p "$RUN_DIR"
mkdir -p "$MEDIA_DIR"
mkdir -p "$STATIC_DIR"

## symbolic links to media and static to docker volume
[ -d "/usr/src/app/backend/static" ] && cp -rfT /usr/src/app/backend/static "$STATIC_DIR"
[ -d "/usr/src/app/backend/media" ] && cp -rfT /usr/src/app/backend/media "$MEDIA_DIR"

if [ "x$1" = "x" ] ; then echo "environment not provided"; exit; fi

### GUNICORN RELATED ENVIRONMENT VARIABLES ###
NAME="faktura"
DJANGODIR=/usr/src/app
USER=root
GROUP=root
WORKERS=3
BIND=unix:"$RUN_DIR/gunicorn.sock"
DJANGO_SETTINGS_MODULE=backend.settings.${FAKTURA_ENV}
DJANGO_WSGI_MODULE=backend.wsgi
LOGLEVEL=error

# source database & ftp credentials
if [[ "$FAKTURA_ENV" == "testing" || "$FAKTURA_ENV" == "production" ]]; then
    echo "SOURCING CREDS_STD"
    source "$SECRETS/creds_std"
    echo "SOURCING CREDS_MS"
    source "$SECRETS/creds_ms"
fi

export LOG_DIR
export DJANGO_SETTINGS_MODULE=$DJANGO_SETTINGS_MODULE
export PYTHONPATH=$DJANGODIR:$PYTHONPATH

echo "$FAKTURA_ENV"

# generate keytab
if [[ "$FAKTURA_ENV" == "testing" || "$FAKTURA_ENV" == "production" ]]; then
    echo "SOURCING CREDS_KT"
    source "$SECRETS/creds_kt"
    keytab_script="$DJANGODIR/scripts/generate-keytab.sh"

    "$keytab_script" "$KEYTAB_PRINCIPAL" "$KEYTAB_PASSWORD"

    # create ticket
    KEYTAB_FILE="$SECRETS/kerberos.kt"
    kinit -kt "$KEYTAB_FILE" "$KEYTAB_PRINCIPAL"
elif [[ "$FAKTURA_ENV" == "development" ]]; then ## delete sqlite db that was copied to container
    echo "Removing development db"
    rm -rf "$DJANGODIR/backend/db.sqlite3"
fi

# prepare database
manage_script="$DJANGODIR/manage.py"
"$manage_script" migrate
"$manage_script" generate-data

echo "Server is up and running and ready to use."

exec gunicorn ${DJANGO_WSGI_MODULE}:application --name $NAME --workers $WORKERS --user=$USER --group=$GROUP --bind=$BIND --log-level=$LOGLEVEL --log-file=-